import streamlit as st
import pandas as pd

st.set_page_config(page_title="Analyse des lev√©es de fonds", layout="wide")

st.title("üìä Outil d‚Äôanalyse des lev√©es de fonds des incub√©s")

uploaded_file = st.file_uploader("Chargez votre fichier .csv ou .xlsx", type=["csv", "xlsx"])

if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
    else:
        df = pd.read_excel(uploaded_file)

    year_cols = [
        'Montant 2021 (si >100K)',
        'Montant 2022 (si >100K)',
        'Montant 2023 (si >100K)',
        'Montant 2024 (si >100K)'
    ]

    # Convertir les colonnes montant en num√©rique (float), g√©rer erreurs
    for col in year_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # --- Synth√®se g√©n√©rale ---
    st.header("üìà Synth√®se des lev√©es de fonds")

    lev√©es = []
    for _, row in df.iterrows():
        for i, col in enumerate(year_cols):
            montant = row[col]
            if pd.notnull(montant):
                lev√©es.append({
                    'Ann√©e': 2021 + i,
                    'Montant': montant
                })

    df_lev√©es = pd.DataFrame(lev√©es)
    total_lev√©es = df_lev√©es.groupby('Ann√©e')['Montant'].sum()
    count_lev√©es = df_lev√©es.groupby('Ann√©e')['Montant'].count()
    mean_lev√©es = df_lev√©es.groupby('Ann√©e')['Montant'].mean()

    synth√®se = pd.DataFrame({
        "Nb lev√©es": count_lev√©es,
        "Montant total (‚Ç¨)": total_lev√©es,
        "Montant moyen (‚Ç¨)": mean_lev√©es
    }).astype({"Nb lev√©es": int})

    st.subheader("üìå Informations g√©n√©rales par ann√©e")
    st.dataframe(synth√®se, use_container_width=True)

    # --- Synth√®se par fili√®re ---
    st.header("üè≠ Synth√®se par fili√®re (Indus+Bio√©co, Num√©rique, Sant√©)")

    fili√®res = {
        "Indus+Bio√©co": "Indus+Bio√©co",
        "Num√©rique": "Num√©rique",
        "Sant√©": "Sant√©"
    }

    synth√®se_fili√®re = pd.DataFrame(columns=["Nb lev√©es", "Montant total (‚Ç¨)", "Montant moyen (‚Ç¨)"], index=fili√®res.keys())

    for nom, col_fili√®re in fili√®res.items():
        fdf = df[df[col_fili√®re] == 1]
        montants = fdf[year_cols].values.flatten()
        montants = pd.to_numeric(montants, errors='coerce')
        montants = montants[~pd.isnull(montants)]
        if len(montants) > 0:
            synth√®se_fili√®re.loc[nom] = [
                len(montants),
                round(montants.sum(), 2),
                round(montants.mean(), 2)
            ]
        else:
            synth√®se_fili√®re.loc[nom] = [0, 0.0, 0.0]

    st.dataframe(synth√®se_fili√®re, use_container_width=True)

    # --- Analyse par th√®me ---
    st.header("üîç Analyse par th√®me : filtres et visualisations")

    with st.expander("üéõÔ∏è Filtres"):
        selected_fili√®re = st.multiselect("Fili√®re", fili√®res.keys())
        filtre = df.copy()
        if selected_fili√®re:
            mask = pd.Series([False]*len(df))
            for f in selected_fili√®re:
                mask = mask | (df[fili√®res[f]] == 1)
            filtre = filtre[mask]

        deeptech = st.checkbox("Deeptech uniquement", value=False)
        if deeptech:
            filtre = filtre[filtre["Deeptech"] == 1]

        lien = st.checkbox("Lien avec la recherche publique uniquement", value=False)
        if lien:
            filtre = filtre[filtre["Lien recherche publique fr?"] == 1]

        endo_exo = st.selectbox("Origine du projet", ["Tous", "Endog√®ne", "Exog√®ne"])
        if endo_exo == "Endog√®ne":
            filtre = filtre[filtre["ENDOGENE"] == 1]
        elif endo_exo == "Exog√®ne":
            filtre = filtre[filtre["EXOGENE"] == 1]

    st.write(f"Nombre de projets correspondant : {filtre.shape[0]}")

    montant_total = filtre[year_cols].sum().sum()
    montant_moyen = filtre[year_cols].stack().mean()
    st.metric("üí∞ Montant total filtr√©", f"{montant_total:,.0f} ‚Ç¨")
    st.metric("üìä Montant moyen filtr√©", f"{montant_moyen:,.0f} ‚Ç¨")

    # --- D√©tail par fili√®re, crit√®re, ann√©e ---
    st.header("üìÇ D√©tail par fili√®re, par crit√®re et par ann√©e")

    cat√©gories = {
        "Endog√®ne": "ENDOGENE",
        "Exog√®ne": "EXOGENE",
        "Lien recherche": "Lien recherche publique fr?",
        "Deeptech": "Deeptech"
    }

    for nom_fili√®re, col_fili√®re in fili√®res.items():
        st.subheader(f"üß¨ Fili√®re : {nom_fili√®re}")
        fdf = df[df[col_fili√®re] == 1]
        total_projets = fdf.shape[0] if fdf.shape[0] > 0 else 1  # √©viter division par 0

        # Cr√©ation des colonnes pour chaque ann√©e / type d'info
        colonnes = []
        for year in [2021, 2022, 2023, 2024]:
            colonnes.extend([
                f"{year} Montant (‚Ç¨)",
                f"{year} Nb projets",
                f"{year} % projets"
            ])

        tableau = pd.DataFrame(index=cat√©gories.keys(), columns=colonnes)

        for cat_label, cat_col in cat√©gories.items():
            cdf = fdf[fdf[cat_col] == 1]
            for year, col_montant in zip([2021, 2022, 2023, 2024], year_cols):
                montant = cdf[col_montant].sum(skipna=True)
                nb_proj = cdf[cdf[col_montant].notnull()].shape[0]
                pct = (nb_proj / total_projets) * 100 if total_projets > 0 else 0

                tableau.at[cat_label, f"{year} Montant (‚Ç¨)"] = f"{montant:,.0f} ‚Ç¨"
                tableau.at[cat_label, f"{year} Nb projets"] = nb_proj
                tableau.at[cat_label, f"{year} % projets"] = f"{pct:.1f} %"

        st.dataframe(tableau.fillna("-"), use_container_width=True)

else:
    st.info("Veuillez importer un fichier CSV ou Excel pour d√©marrer.")
